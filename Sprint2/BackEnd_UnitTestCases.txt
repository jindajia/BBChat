PostMan Test Examples:

0. Before create a new account for the user, check whether the username is avaliable:
test case with unused username:
POST http://localhost:8000/isUsernameAvailable/zasca
Response:
{
    "code": 200,
    "status": "OK",
    "message": "Username is available.",
    "response": {
        "isUsernameAvailable": true
    }
}

test case with registered username:
http://localhost:8000/isUsernameAvailable/zascauchy
Response:
{
    "code": 200,
    "status": "OK",
    "message": "Username is not available.",
    "response": {
        "isUsernameAvailable": false
    }
}


1. for Register an account:
Case:
POST 
http://localhost:8000/registration
{
    "Username": "zascauchy",
    "Password": "kkkna784984",
}
Response:
{
    "code": 200,
    "status": "OK",
    "message": "User Registration Completed.",
    "response": {
        "username": "zascauchy",
        "userID": "622261e5f61f9a3ee8b25101",
        "online": ""
    }
}
case without password input:
{
    "Username": "ioih",
    "Password": ""
}
response:
{
    "code": 500,
    "status": "Internal Server Error",
    "message": "Password can't be empty.",
    "response": null
}

2. for log in an account

Normal Case =>
{
    "Username": "zascauchy",
    "Password": "kkkna784984"
}

Response:
{
    "code": 200,
    "status": "OK",
    "message": "User Login is Completed.",
    "response": {
        "username": "zascauchy",
        "userID": "622261e5f61f9a3ee8b25101",
        "online": ""
    }
}

Login with wrong password =>

{
    "Username": "c2233",
    "Password": "kkkna74"
}

Response:
{
    "code": 404,
    "status": "Not Found",
    "message": "Your Login Password is incorrect.",
    "response": null
}

Login with unregistered username =>

{
    "Username": "842233",
    "Password": "kkkna74"
}

Response:
{
    "code": 404,
    "status": "Not Found",
    "message": "This account does not exist in our system.",
    "response": null
}

3. send messages :
websocket Request =>   ws://localhost:8000/ws/62211d78de6da79873505621

In this function, there are 3 event: join, message and disconnect. We test them separately.

Test case:
{
    "eventName": "join",
    "eventPayload":
    "62211d78de6da79873505621"
}

{
    "eventName":    "message",
    "eventPayload":
    {
        "fromUserID": "62211d78de6da79873505621",
        "toUserID": "62211e70de6da79873505622",
        "message": "4 March Test"
    }
}

{
    "eventName": "disconnect",
    "eventPayload":
    "62211d78de6da79873505621"
}
response for disconnect:
{
    "eventName": "chatlist-response",
    "eventPayload": {
        "type": "user-disconnected",
        "chatlist": {
            "username": "",
            "userID": "",
            "online": "N"
        }
    }
}

4. User session check:
test case with logged in userID 622261e5f61f9a3ee8b25101=>
http://localhost:8000/userSessionCheck/622261e5f61f9a3ee8b25101
Response:
{
    "code": 200,
    "status": "OK",
    "message": "You are logged in.",
    "response": true
}

test case with logged out userID 62211e70de6da79873505622=>
http://localhost:8000/userSessionCheck/62211e70de6da79873505622
{
    "code": 200,
    "status": "OK",
    "message": "You are logged in.",
    "response": false
}

5.
get conversation function (Retrive the messages between two users):
GET localhost:8000/getConversation/{toUserID}/{fromUserID}

test cases
GET localhost:8000/getConversation/62211e74de6da79873505622/62211e74de6da79873505621
Response:
{
    "code": 200,
    "status": "OK",
    "message": "Username is available.",
    "response": [
        {
            "id": "6222382aa638a22e8350a36b",
            "message": "messsssHey",
            "toUserID": "62211e74de6da79873505622",
            "fromUserID": "62211e74de6da79873505621"
        }
    ]
}

If there is no messages from between this two users:
Response:
{
    "code": 200,
    "status": "OK",
    "message": "Username is available.",
    "response": null
}
